< Fraction.jack, 7, class, RESWORD >
< Fraction.jack, 7, Fraction, ID >
< Fraction.jack, 7, {, SYMBOL >
< Fraction.jack, 8, field, RESWORD >
< Fraction.jack, 8, int, RESWORD >
< Fraction.jack, 8, numerator, ID >
< Fraction.jack, 8, ,, SYMBOL >
< Fraction.jack, 8, denominator, ID >
< Fraction.jack, 8, ;, SYMBOL >
< Fraction.jack, 11, constructor, RESWORD >
< Fraction.jack, 11, Fraction, ID >
< Fraction.jack, 11, new, ID >
< Fraction.jack, 11, (, SYMBOL >
< Fraction.jack, 11, int, RESWORD >
< Fraction.jack, 11, x, ID >
< Fraction.jack, 11, ,, SYMBOL >
< Fraction.jack, 11, int, RESWORD >
< Fraction.jack, 11, y, ID >
< Fraction.jack, 11, ), SYMBOL >
< Fraction.jack, 11, {, SYMBOL >
< Fraction.jack, 12, let, RESWORD >
< Fraction.jack, 12, numerator, ID >
< Fraction.jack, 12, =, SYMBOL >
< Fraction.jack, 12, x, ID >
< Fraction.jack, 12, ;, SYMBOL >
< Fraction.jack, 13, let, RESWORD >
< Fraction.jack, 13, denominator, ID >
< Fraction.jack, 13, =, SYMBOL >
< Fraction.jack, 13, y, ID >
< Fraction.jack, 13, ;, SYMBOL >
< Fraction.jack, 14, do, RESWORD >
< Fraction.jack, 14, reduce, ID >
< Fraction.jack, 14, (, SYMBOL >
< Fraction.jack, 14, ), SYMBOL >
< Fraction.jack, 14, ;, SYMBOL >
< Fraction.jack, 15, return, RESWORD >
< Fraction.jack, 15, this, RESWORD >
< Fraction.jack, 15, ;, SYMBOL >
< Fraction.jack, 16, }, SYMBOL >
< Fraction.jack, 19, method, RESWORD >
< Fraction.jack, 19, void, RESWORD >
< Fraction.jack, 19, reduce, ID >
< Fraction.jack, 19, (, SYMBOL >
< Fraction.jack, 19, ), SYMBOL >
< Fraction.jack, 19, {, SYMBOL >
< Fraction.jack, 20, var, RESWORD >
< Fraction.jack, 20, int, RESWORD >
< Fraction.jack, 20, g, ID >
< Fraction.jack, 20, ;, SYMBOL >
< Fraction.jack, 21, let, RESWORD >
< Fraction.jack, 21, g, ID >
< Fraction.jack, 21, =, SYMBOL >
< Fraction.jack, 21, Fraction, ID >
< Fraction.jack, 21, ., SYMBOL >
< Fraction.jack, 21, gcd, ID >
< Fraction.jack, 21, (, SYMBOL >
< Fraction.jack, 21, numerator, ID >
< Fraction.jack, 21, ,, SYMBOL >
< Fraction.jack, 21, denominator, ID >
< Fraction.jack, 21, ), SYMBOL >
< Fraction.jack, 21, ;, SYMBOL >
< Fraction.jack, 22, if, RESWORD >
< Fraction.jack, 22, (, SYMBOL >
< Fraction.jack, 22, g, ID >
< Fraction.jack, 22, >, SYMBOL >
< Fraction.jack, 22, 1, INT >
< Fraction.jack, 22, ), SYMBOL >
< Fraction.jack, 22, {, SYMBOL >
< Fraction.jack, 23, let, RESWORD >
< Fraction.jack, 23, numerator, ID >
< Fraction.jack, 23, =, SYMBOL >
< Fraction.jack, 23, numerator, ID >
< Fraction.jack, 23, /, SYMBOL >
< Fraction.jack, 23, g, ID >
< Fraction.jack, 23, ;, SYMBOL >
< Fraction.jack, 24, let, RESWORD >
< Fraction.jack, 24, denominator, ID >
< Fraction.jack, 24, =, SYMBOL >
< Fraction.jack, 24, denominator, ID >
< Fraction.jack, 24, /, SYMBOL >
< Fraction.jack, 24, g, ID >
< Fraction.jack, 24, ;, SYMBOL >
< Fraction.jack, 25, }, SYMBOL >
< Fraction.jack, 26, return, RESWORD >
< Fraction.jack, 26, ;, SYMBOL >
< Fraction.jack, 27, }, SYMBOL >
< Fraction.jack, 30, method, RESWORD >
< Fraction.jack, 30, int, RESWORD >
< Fraction.jack, 30, getNumerator, ID >
< Fraction.jack, 30, (, SYMBOL >
< Fraction.jack, 30, ), SYMBOL >
< Fraction.jack, 30, {, SYMBOL >
< Fraction.jack, 30, return, RESWORD >
< Fraction.jack, 30, numerator, ID >
< Fraction.jack, 30, ;, SYMBOL >
< Fraction.jack, 30, }, SYMBOL >
< Fraction.jack, 31, method, RESWORD >
< Fraction.jack, 31, int, RESWORD >
< Fraction.jack, 31, getDenominator, ID >
< Fraction.jack, 31, (, SYMBOL >
< Fraction.jack, 31, ), SYMBOL >
< Fraction.jack, 31, {, SYMBOL >
< Fraction.jack, 31, return, RESWORD >
< Fraction.jack, 31, denominator, ID >
< Fraction.jack, 31, ;, SYMBOL >
< Fraction.jack, 31, }, SYMBOL >
< Fraction.jack, 34, method, RESWORD >
< Fraction.jack, 34, Fraction, ID >
< Fraction.jack, 34, plus, ID >
< Fraction.jack, 34, (, SYMBOL >
< Fraction.jack, 34, Fraction, ID >
< Fraction.jack, 34, other, ID >
< Fraction.jack, 34, ), SYMBOL >
< Fraction.jack, 34, {, SYMBOL >
< Fraction.jack, 35, var, RESWORD >
< Fraction.jack, 35, int, RESWORD >
< Fraction.jack, 35, sum, ID >
< Fraction.jack, 35, ;, SYMBOL >
< Fraction.jack, 36, let, RESWORD >
< Fraction.jack, 36, sum, ID >
< Fraction.jack, 36, =, SYMBOL >
< Fraction.jack, 36, (, SYMBOL >
< Fraction.jack, 36, numerator, ID >
< Fraction.jack, 36, *, SYMBOL >
< Fraction.jack, 36, other, ID >
< Fraction.jack, 36, ., SYMBOL >
< Fraction.jack, 36, getDenominator, ID >
< Fraction.jack, 36, (, SYMBOL >
< Fraction.jack, 36, ), SYMBOL >
< Fraction.jack, 36, ), SYMBOL >
< Fraction.jack, 36, +, SYMBOL >
< Fraction.jack, 36, (, SYMBOL >
< Fraction.jack, 36, other, ID >
< Fraction.jack, 36, ., SYMBOL >
< Fraction.jack, 36, getNumerator, ID >
< Fraction.jack, 36, (, SYMBOL >
< Fraction.jack, 36, ), SYMBOL >
< Fraction.jack, 36, *, SYMBOL >
< Fraction.jack, 36, denominator, ID >
< Fraction.jack, 36, ), SYMBOL >
< Fraction.jack, 36, ;, SYMBOL >
< Fraction.jack, 37, return, RESWORD >
< Fraction.jack, 37, Fraction, ID >
< Fraction.jack, 37, ., SYMBOL >
< Fraction.jack, 37, new, ID >
< Fraction.jack, 37, (, SYMBOL >
< Fraction.jack, 37, sum, ID >
< Fraction.jack, 37, ,, SYMBOL >
< Fraction.jack, 37, denominator, ID >
< Fraction.jack, 37, *, SYMBOL >
< Fraction.jack, 37, other, ID >
< Fraction.jack, 37, ., SYMBOL >
< Fraction.jack, 37, getDenominator, ID >
< Fraction.jack, 37, (, SYMBOL >
< Fraction.jack, 37, ), SYMBOL >
< Fraction.jack, 37, ), SYMBOL >
< Fraction.jack, 37, ;, SYMBOL >
< Fraction.jack, 38, }, SYMBOL >
< Fraction.jack, 43, method, RESWORD >
< Fraction.jack, 43, void, RESWORD >
< Fraction.jack, 43, dispose, ID >
< Fraction.jack, 43, (, SYMBOL >
< Fraction.jack, 43, ), SYMBOL >
< Fraction.jack, 43, {, SYMBOL >
< Fraction.jack, 44, do, RESWORD >
< Fraction.jack, 44, Memory, ID >
< Fraction.jack, 44, ., SYMBOL >
< Fraction.jack, 44, deAlloc, ID >
< Fraction.jack, 44, (, SYMBOL >
< Fraction.jack, 44, this, RESWORD >
< Fraction.jack, 44, ), SYMBOL >
< Fraction.jack, 44, ;, SYMBOL >
< Fraction.jack, 45, return, RESWORD >
< Fraction.jack, 45, ;, SYMBOL >
< Fraction.jack, 46, }, SYMBOL >
< Fraction.jack, 49, method, RESWORD >
< Fraction.jack, 49, void, RESWORD >
< Fraction.jack, 49, print, ID >
< Fraction.jack, 49, (, SYMBOL >
< Fraction.jack, 49, ), SYMBOL >
< Fraction.jack, 49, {, SYMBOL >
< Fraction.jack, 50, do, RESWORD >
< Fraction.jack, 50, Output, ID >
< Fraction.jack, 50, ., SYMBOL >
< Fraction.jack, 50, printInt, ID >
< Fraction.jack, 50, (, SYMBOL >
< Fraction.jack, 50, numerator, ID >
< Fraction.jack, 50, ), SYMBOL >
< Fraction.jack, 50, ;, SYMBOL >
< Fraction.jack, 51, do, RESWORD >
< Fraction.jack, 51, Output, ID >
< Fraction.jack, 51, ., SYMBOL >
< Fraction.jack, 51, printString, ID >
< Fraction.jack, 51, (, SYMBOL >
< Fraction.jack, 51, /, STRING >
< Fraction.jack, 51, ), SYMBOL >
< Fraction.jack, 51, ;, SYMBOL >
< Fraction.jack, 52, do, RESWORD >
< Fraction.jack, 52, Output, ID >
< Fraction.jack, 52, ., SYMBOL >
< Fraction.jack, 52, printInt, ID >
< Fraction.jack, 52, (, SYMBOL >
< Fraction.jack, 52, denominator, ID >
< Fraction.jack, 52, ), SYMBOL >
< Fraction.jack, 52, ;, SYMBOL >
< Fraction.jack, 53, return, RESWORD >
< Fraction.jack, 53, ;, SYMBOL >
< Fraction.jack, 54, }, SYMBOL >
< Fraction.jack, 57, function, RESWORD >
< Fraction.jack, 57, int, RESWORD >
< Fraction.jack, 57, gcd, ID >
< Fraction.jack, 57, (, SYMBOL >
< Fraction.jack, 57, int, RESWORD >
< Fraction.jack, 57, a, ID >
< Fraction.jack, 57, ,, SYMBOL >
< Fraction.jack, 57, int, RESWORD >
< Fraction.jack, 57, b, ID >
< Fraction.jack, 57, ), SYMBOL >
< Fraction.jack, 57, {, SYMBOL >
< Fraction.jack, 58, var, RESWORD >
< Fraction.jack, 58, int, RESWORD >
< Fraction.jack, 58, r, ID >
< Fraction.jack, 58, ;, SYMBOL >
< Fraction.jack, 59, while, RESWORD >
< Fraction.jack, 59, (, SYMBOL >
< Fraction.jack, 59, ~, SYMBOL >
< Fraction.jack, 59, (, SYMBOL >
< Fraction.jack, 59, b, ID >
< Fraction.jack, 59, =, SYMBOL >
< Fraction.jack, 59, 0, INT >
< Fraction.jack, 59, ), SYMBOL >
< Fraction.jack, 59, ), SYMBOL >
< Fraction.jack, 59, {, SYMBOL >
< Fraction.jack, 60, let, RESWORD >
< Fraction.jack, 60, r, ID >
< Fraction.jack, 60, =, SYMBOL >
< Fraction.jack, 60, a, ID >
< Fraction.jack, 60, -, SYMBOL >
< Fraction.jack, 60, (, SYMBOL >
< Fraction.jack, 60, b, ID >
< Fraction.jack, 60, *, SYMBOL >
< Fraction.jack, 60, (, SYMBOL >
< Fraction.jack, 60, a, ID >
< Fraction.jack, 60, /, SYMBOL >
< Fraction.jack, 60, b, ID >
< Fraction.jack, 60, ), SYMBOL >
< Fraction.jack, 60, ), SYMBOL >
< Fraction.jack, 60, ;, SYMBOL >
< Fraction.jack, 61, let, RESWORD >
< Fraction.jack, 61, a, ID >
< Fraction.jack, 61, =, SYMBOL >
< Fraction.jack, 61, b, ID >
< Fraction.jack, 61, ;, SYMBOL >
< Fraction.jack, 61, let, RESWORD >
< Fraction.jack, 61, b, ID >
< Fraction.jack, 61, =, SYMBOL >
< Fraction.jack, 61, r, ID >
< Fraction.jack, 61, ;, SYMBOL >
< Fraction.jack, 62, }, SYMBOL >
< Fraction.jack, 63, return, RESWORD >
< Fraction.jack, 63, a, ID >
< Fraction.jack, 63, ;, SYMBOL >
< Fraction.jack, 64, }, SYMBOL >
< Fraction.jack, 65, }, SYMBOL >
< Fraction.jack, 66, End of File, EOFile >
